$schema: 'https://moonrepo.dev/schemas/tasks.json'

extends: './tag-rust-base.yml'


tasks:
  build:
    command: 'wasm-pack build'
    inputs:
      - '@group(cargo)'
      - '@group(sources)'
    env: &env
      CARGO_TERM_COLOR: 'always'
    deps:
      - "~:build-no-modules"
  build-no-modules:
    command: 'wasm-pack build --target web --scope no-modules --out-dir no-modules'
    inputs:
      - '@group(cargo)'
      - '@group(sources)'
    env: &env
      CARGO_TERM_COLOR: 'always'
  test-web:
    command: 'wasm-pack test --firefox --headless'
    inputs:
      - '@group(cargo)'
      - '@group(sources)'
      - '@group(tests)'
      - '/.config/nextest.*'
    env: *env
    options:
      runInCI: false

  test-node:
    command: "wasm-pack test --node"
    inputs:
      - '@group(cargo)'
      - '@group(sources)'
      - '@group(tests)'
      - '/.config/nextest.*'
    env: *env
    options:
      runInCI: false

  test:
    command: 'nextest run'
    inputs:
      - '@group(cargo)'
      - '@group(sources)'
      - '@group(tests)'
      - '/.config/nextest.*'
    env: *env
    deps:
      - "~:test-web"
      - "~:test-node"
    options:
      runDepsInParallel: false
  # test:
  #   command: "noop"
  #   deps:
  #     - "~:test-web"
  #     - "~:test-node"
  #   options:
  #     runDepsInParallel: false
    
# implicitInputs:
#   - 'Cargo.toml'

# fileGroups:
#   cargo:
#     - 'Cargo.toml'
#     - 'crates/*/src/**/*'
#     - 'crates/*/Cargo.toml'
#     # - '/.cargo/config.toml'
#     - '/rust-toolchain.toml'
#   sources: []
#   tests:
#     - 'crates/*/benches/**/*'
#     - 'crates/*/tests/**/*'

# tasks:
#   cargo:
#     command: 'cargo'
#     local: true

#   build: &build
#     command: 'wasm-pack build'
#     inputs:
#       - '@group(cargo)'
#       - '@group(sources)'
#     env: &env
#       CARGO_TERM_COLOR: 'always'

#   # build-release:
#   #   <<: *build
#   #   command: 'cargo build --release'
#   #   local: true

#   check:
#     command: 'cargo check --workspace --all-targets'
#     inputs:
#       - '@group(cargo)'
#       - '@group(sources)'
#       - '@group(tests)'
#     env: *env

#   # dev:
#   #   command: 'cargo run'
#   #   inputs:
#   #     - '@group(cargo)'
#   #     - '@group(sources)'
#   #   local: true
#   #   env: *env

#   format: &format
#     command: 'cargo fmt --all --check'
#     inputs:
#       - '@group(cargo)'
#       - '@group(sources)'
#       - '@group(tests)'
#       - '/rustfmt.toml'
#     env: *env

#   format-write:
#     <<: *format
#     command: 'cargo fmt --all -- --emit=files'
#     local: true

#   lint: &lint
#     command: 'cargo clippy --workspace --all-targets'
#     inputs:
#       - '@group(cargo)'
#       - '@group(sources)'
#       - '@group(tests)'
#       - '/clippy.toml'
#     env: *env

#   lint-fix:
#     <<: *lint
#     command: 'cargo clippy --workspace --all-targets --fix --allow-dirty --allow-staged'
#     local: true

#   test-web:
#     command: 'wasm-pack test --firefox --headless'
#     inputs:
#       - '@group(cargo)'
#       - '@group(sources)'
#       - '@group(tests)'
#       - '/.config/nextest.*'
#     env: *env

#   test-node:
#     command: "wasm-pack test --node"
#     inputs:
#       - '@group(cargo)'
#       - '@group(sources)'
#       - '@group(tests)'
#       - '/.config/nextest.*'
#     env: *env